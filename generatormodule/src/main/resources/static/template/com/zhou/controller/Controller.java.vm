package ${controllerP};

import com.github.pagehelper.PageInfo;
import com.zhou.common.base.BaseController;
import ${entityP}.${className};
import ${serviceP}.${className}Service;
import org.apache.commons.collections.map.HashedMap;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.support.PagedListHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import java.util.List;
import java.util.Map;

/**
 * Created by Administrator on 2017/12/25 0025.
 */
@RestController
@RequestMapping("/${className.substring(0,1).toLowerCase()}${className.substring(1)}")
public class ${className}Controller extends BaseController {
    @Autowired
    private ${className}Service ${className.substring(0,1).toLowerCase()}${className.substring(1)}Service;


    @RequestMapping(value = "/to${className}List")
    public ModelAndView to${className}List(Model model) {
        return new ModelAndView(VIEW_PATH + "${className.substring(0,1).toLowerCase()}${className.substring(1)}/${className}_list");
    }

    @RequestMapping("/get${className}Data")
    public Map<String, Object> get${className}Data(${className} ${className.substring(0,1).toLowerCase()}${className.substring(1)}) {

        List<${className}> list=null;
        PageInfo<${className}> pageInfo=null;
        try {
            list = ${className.substring(0,1).toLowerCase()}${className.substring(1)}Service.selectPageList(${className.substring(0,1).toLowerCase()}${className.substring(1)}, ${className.substring(0,1).toLowerCase()}${className.substring(1)}.getPageIndex(), ${className.substring(0,1).toLowerCase()}${className.substring(1)}.getPageSize());
            pageInfo = new PageInfo<>(list);
        }catch (Exception e){
            e.printStackTrace();
        }
        return responseTo(pageInfo.getTotal(), list);
    }

    @RequestMapping("/toadd${className}")
    public ModelAndView toadd${className}() {
        return new ModelAndView(VIEW_PATH + "${className.substring(0,1).toLowerCase()}${className.substring(1)}/${className}_add");
    }

    @RequestMapping(value = "/doAdd${className}")
    public Map<String, Object> doAdd${className}(${className} ${className.substring(0,1).toLowerCase()}${className.substring(1)}) {
        try {
            ${className.substring(0,1).toLowerCase()}${className.substring(1)}Service.insertSelective(${className.substring(0,1).toLowerCase()}${className.substring(1)});
        } catch (Exception e) {
            e.printStackTrace();
            return error();
        }
        return success();
    }

    @RequestMapping(value = "/toEdit${className}")
    public ModelAndView toEdit${className}(@RequestParam(value = "id") long id, Model model) {
        ${className} ${className.substring(0,1).toLowerCase()}${className.substring(1)} = null;
        try {
            ${className.substring(0,1).toLowerCase()}${className.substring(1)} = (${className}) ${className.substring(0,1).toLowerCase()}${className.substring(1)}Service.selectByPrimaryKey(id);
            model.addAttribute("${className.substring(0,1).toLowerCase()}${className.substring(1)}", ${className.substring(0,1).toLowerCase()}${className.substring(1)});
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new ModelAndView(VIEW_PATH + "${className.substring(0,1).toLowerCase()}${className.substring(1)}/${className}_edit");
    }

    @RequestMapping(value = "/doEdit${className}")
    public Map<String, Object> doEdit${className}(${className} ${className.substring(0,1).toLowerCase()}${className.substring(1)}) {
        try {
            ${className.substring(0,1).toLowerCase()}${className.substring(1)}Service.updateByPrimaryKeySelective(${className.substring(0,1).toLowerCase()}${className.substring(1)});
        } catch (Exception e) {
            e.printStackTrace();
            return error();
        }
        return success();
    }

    @RequestMapping(value = "/doDel${className}")
    public Map<String, Object> doDel${className}(@RequestParam(value = "id", required = true) long id) {
        try {
            ${className.substring(0,1).toLowerCase()}${className.substring(1)}Service.deleteByPrimaryKey(id);
        } catch (Exception e) {
            e.printStackTrace();
            return error();
        }
        return success();
    }
}
