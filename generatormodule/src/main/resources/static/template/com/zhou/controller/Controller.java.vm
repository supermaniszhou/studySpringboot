package ${controllerP};

import com.github.pagehelper.PageHelper;
import com.zhou.base.BaseController;
import ${entityP}.${className};
import ${serviceP}.${className}Service;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.collections.map.HashedMap;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.support.PagedListHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import java.util.List;
import java.util.Map;

/**
 * Created by Administrator on 2017/12/25 0025.
 */
@RestController
@RequestMapping("/${className.substring(0,1).toLowerCase()}${className.substring(1)}")
public class ${className}Controller extends BaseController {
    @Autowired
    private ${className}Service ${className.substring(0,1).toLowerCase()}${className.substring(1)}Service;


    @RequestMapping(value = "/to${className}List")
    public ModelAndView to${className}List(Model model) {
        return new ModelAndView(VIEW_PATH + "${className.substring(0,1).toLowerCase()}${className.substring(1)}/${className}_list");
    }

    @RequestMapping("/get${className}Data")
    @ResponseBody
    public Map<String, Object> get${className}Data(@RequestParam(value = "pageSize", required = false) int pageSize,
                                           @RequestParam(value = "pageIndex", required = false) int pageIndex) {

        Map<String, Object> map = new HashedMap();
        ${className} ${className.substring(0,1).toLowerCase()}${className.substring(1)} = new ${className}();
        int count = ${className.substring(0,1).toLowerCase()}${className.substring(1)}Service.queryCount(${className.substring(0,1).toLowerCase()}${className.substring(1)});
        List<${className}> list = ${className.substring(0,1).toLowerCase()}${className.substring(1)}Service.queryList(${className.substring(0,1).toLowerCase()}${className.substring(1)}, pageIndex, pageSize);

        map.put("total", count);
        map.put("rows", list);
        return map;
    }



    @RequestMapping(value = "/doAdd")
    @ResponseBody
    public Map<String, Object> doAdd(${className} ${className.substring(0,1).toLowerCase()}${className.substring(1)}) {
        try {
            ${className.substring(0,1).toLowerCase()}${className.substring(1)}Service.addObj(${className.substring(0,1).toLowerCase()}${className.substring(1)});
        } catch (Exception e) {
            e.printStackTrace();
            return error();
        }
        return success();
    }

    @RequestMapping(value = "toEdit")
    @ResponseBody
    public Map<String, Object> toEdit(@RequestParam(value = "id") String id, @RequestParam("flag") String flag) {
        ${className} ${className.substring(0,1).toLowerCase()}${className.substring(1)} = null;
        try {
            ${className} obj = new ${className}();
            obj.setId(Integer.parseInt(id));
            ${className.substring(0,1).toLowerCase()}${className.substring(1)} = (${className}) ${className.substring(0,1).toLowerCase()}${className.substring(1)}Service.queryObj(obj);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return responseTo(SUCCESS_FLAG, SUCCESS_MSG, ${className.substring(0,1).toLowerCase()}${className.substring(1)}, flag);
    }

    @RequestMapping(value = "doEdit")
    @ResponseBody
    public Map<String, Object> doEdit(${className} ${className.substring(0,1).toLowerCase()}${className.substring(1)}) {
        try {
            ${className.substring(0,1).toLowerCase()}${className.substring(1)}Service.updateObj(${className.substring(0,1).toLowerCase()}${className.substring(1)});
        } catch (Exception e) {
            e.printStackTrace();
            return error();
        }
        return success();
    }

    @RequestMapping(value = "doDel")
    @ResponseBody
    public Map<String, Object> doDel(@RequestParam(value = "id", required = true) Integer id) {
        try {
            ${className} ${className.substring(0,1).toLowerCase()}${className.substring(1)} = new ${className}();
            ${className.substring(0,1).toLowerCase()}${className.substring(1)}.setId(id);
            ${className.substring(0,1).toLowerCase()}${className.substring(1)}Service.deleteObj(${className.substring(0,1).toLowerCase()}${className.substring(1)});
        } catch (Exception e) {
            e.printStackTrace();
            return error();
        }
        return success();
    }
}
